// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/id_card_proto/id_card/id_card.proto

package id_card

import (
	context "context"
	fmt "fmt"
	common "git.cn/golang/common/proto/common"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type GetRecordsRequest struct {
	// 项目ID
	// @required
	ProjectId string `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// 证件号
	IdNumber string `protobuf:"bytes,2,opt,name=id_number,json=idNumber,proto3" json:"id_number,omitempty"`
	// 姓名
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// 起始日期，比如：2020-01-01
	StartDate string `protobuf:"bytes,4,opt,name=start_date,json=startDate,proto3" json:"start_date,omitempty"`
	// 截止日期，比如：2020-12-31
	EndDate string `protobuf:"bytes,5,opt,name=end_date,json=endDate,proto3" json:"end_date,omitempty"`
	// 认证来源（1人证一体机 2小程序核验 3手动上传 4外部导入）
	SourceType int32 `protobuf:"varint,6,opt,name=source_type,json=sourceType,proto3" json:"source_type,omitempty"`
	// 页码，默认1
	Page int64 `protobuf:"varint,7,opt,name=page,proto3" json:"page,omitempty"`
	// 每页条数，默认10
	PageSize             int64    `protobuf:"varint,8,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetRecordsRequest) Reset()         { *m = GetRecordsRequest{} }
func (m *GetRecordsRequest) String() string { return proto.CompactTextString(m) }
func (*GetRecordsRequest) ProtoMessage()    {}
func (*GetRecordsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb5c46a6c3e068f5, []int{0}
}

func (m *GetRecordsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetRecordsRequest.Unmarshal(m, b)
}
func (m *GetRecordsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetRecordsRequest.Marshal(b, m, deterministic)
}
func (m *GetRecordsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetRecordsRequest.Merge(m, src)
}
func (m *GetRecordsRequest) XXX_Size() int {
	return xxx_messageInfo_GetRecordsRequest.Size(m)
}
func (m *GetRecordsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetRecordsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetRecordsRequest proto.InternalMessageInfo

func (m *GetRecordsRequest) GetProjectId() string {
	if m != nil {
		return m.ProjectId
	}
	return ""
}

func (m *GetRecordsRequest) GetIdNumber() string {
	if m != nil {
		return m.IdNumber
	}
	return ""
}

func (m *GetRecordsRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *GetRecordsRequest) GetStartDate() string {
	if m != nil {
		return m.StartDate
	}
	return ""
}

func (m *GetRecordsRequest) GetEndDate() string {
	if m != nil {
		return m.EndDate
	}
	return ""
}

func (m *GetRecordsRequest) GetSourceType() int32 {
	if m != nil {
		return m.SourceType
	}
	return 0
}

func (m *GetRecordsRequest) GetPage() int64 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *GetRecordsRequest) GetPageSize() int64 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

type GetRecordsResponse struct {
	// 分页信息
	// @required
	Pager *common.Pager `protobuf:"bytes,1,opt,name=pager,proto3" json:"pager,omitempty"`
	// 记录列表
	// @required
	List                 []*Record `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *GetRecordsResponse) Reset()         { *m = GetRecordsResponse{} }
func (m *GetRecordsResponse) String() string { return proto.CompactTextString(m) }
func (*GetRecordsResponse) ProtoMessage()    {}
func (*GetRecordsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb5c46a6c3e068f5, []int{1}
}

func (m *GetRecordsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetRecordsResponse.Unmarshal(m, b)
}
func (m *GetRecordsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetRecordsResponse.Marshal(b, m, deterministic)
}
func (m *GetRecordsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetRecordsResponse.Merge(m, src)
}
func (m *GetRecordsResponse) XXX_Size() int {
	return xxx_messageInfo_GetRecordsResponse.Size(m)
}
func (m *GetRecordsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetRecordsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetRecordsResponse proto.InternalMessageInfo

func (m *GetRecordsResponse) GetPager() *common.Pager {
	if m != nil {
		return m.Pager
	}
	return nil
}

func (m *GetRecordsResponse) GetList() []*Record {
	if m != nil {
		return m.List
	}
	return nil
}

type Record struct {
	// 记录唯一标识
	// @required
	Uuid string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	// 姓名
	// @required
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// 证件号
	// @required
	IdNumber string `protobuf:"bytes,3,opt,name=id_number,json=idNumber,proto3" json:"id_number,omitempty"`
	// 性别（-1未知 0男 1女）
	// @required
	Sex int32 `protobuf:"varint,4,opt,name=sex,proto3" json:"sex,omitempty"`
	// 身份证头像URL
	// @required
	IdImageUrl string `protobuf:"bytes,5,opt,name=id_image_url,json=idImageUrl,proto3" json:"id_image_url,omitempty"`
	// 现场核验头像URL
	// @required
	FaceImageUrl string `protobuf:"bytes,6,opt,name=face_image_url,json=faceImageUrl,proto3" json:"face_image_url,omitempty"`
	// 认证来源（1人证一体机 2小程序核验 3手动上传 4外部导入）
	// @required
	SourceType int32 `protobuf:"varint,7,opt,name=source_type,json=sourceType,proto3" json:"source_type,omitempty"`
	// 认证时间，比如：2020-01-01 08:00:00
	// @required
	VerifyTime           string   `protobuf:"bytes,8,opt,name=verify_time,json=verifyTime,proto3" json:"verify_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Record) Reset()         { *m = Record{} }
func (m *Record) String() string { return proto.CompactTextString(m) }
func (*Record) ProtoMessage()    {}
func (*Record) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb5c46a6c3e068f5, []int{2}
}

func (m *Record) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Record.Unmarshal(m, b)
}
func (m *Record) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Record.Marshal(b, m, deterministic)
}
func (m *Record) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Record.Merge(m, src)
}
func (m *Record) XXX_Size() int {
	return xxx_messageInfo_Record.Size(m)
}
func (m *Record) XXX_DiscardUnknown() {
	xxx_messageInfo_Record.DiscardUnknown(m)
}

var xxx_messageInfo_Record proto.InternalMessageInfo

func (m *Record) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

func (m *Record) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Record) GetIdNumber() string {
	if m != nil {
		return m.IdNumber
	}
	return ""
}

func (m *Record) GetSex() int32 {
	if m != nil {
		return m.Sex
	}
	return 0
}

func (m *Record) GetIdImageUrl() string {
	if m != nil {
		return m.IdImageUrl
	}
	return ""
}

func (m *Record) GetFaceImageUrl() string {
	if m != nil {
		return m.FaceImageUrl
	}
	return ""
}

func (m *Record) GetSourceType() int32 {
	if m != nil {
		return m.SourceType
	}
	return 0
}

func (m *Record) GetVerifyTime() string {
	if m != nil {
		return m.VerifyTime
	}
	return ""
}

type GetLogsRequest struct {
	// 项目ID
	// @required
	ProjectId string `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// 证件号
	// @required
	IdNumber             string   `protobuf:"bytes,2,opt,name=id_number,json=idNumber,proto3" json:"id_number,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetLogsRequest) Reset()         { *m = GetLogsRequest{} }
func (m *GetLogsRequest) String() string { return proto.CompactTextString(m) }
func (*GetLogsRequest) ProtoMessage()    {}
func (*GetLogsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb5c46a6c3e068f5, []int{3}
}

func (m *GetLogsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetLogsRequest.Unmarshal(m, b)
}
func (m *GetLogsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetLogsRequest.Marshal(b, m, deterministic)
}
func (m *GetLogsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetLogsRequest.Merge(m, src)
}
func (m *GetLogsRequest) XXX_Size() int {
	return xxx_messageInfo_GetLogsRequest.Size(m)
}
func (m *GetLogsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetLogsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetLogsRequest proto.InternalMessageInfo

func (m *GetLogsRequest) GetProjectId() string {
	if m != nil {
		return m.ProjectId
	}
	return ""
}

func (m *GetLogsRequest) GetIdNumber() string {
	if m != nil {
		return m.IdNumber
	}
	return ""
}

type GetLogsResponse struct {
	// 刷证次数
	// @required
	Count int64 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	// 记录列表
	// @required
	List                 []*Record `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *GetLogsResponse) Reset()         { *m = GetLogsResponse{} }
func (m *GetLogsResponse) String() string { return proto.CompactTextString(m) }
func (*GetLogsResponse) ProtoMessage()    {}
func (*GetLogsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb5c46a6c3e068f5, []int{4}
}

func (m *GetLogsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetLogsResponse.Unmarshal(m, b)
}
func (m *GetLogsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetLogsResponse.Marshal(b, m, deterministic)
}
func (m *GetLogsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetLogsResponse.Merge(m, src)
}
func (m *GetLogsResponse) XXX_Size() int {
	return xxx_messageInfo_GetLogsResponse.Size(m)
}
func (m *GetLogsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetLogsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetLogsResponse proto.InternalMessageInfo

func (m *GetLogsResponse) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *GetLogsResponse) GetList() []*Record {
	if m != nil {
		return m.List
	}
	return nil
}

type GetMatchedCapturesRequest struct {
	// 项目ID
	// @required
	ProjectId string `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// 证件号
	// @required
	IdNumber             string   `protobuf:"bytes,2,opt,name=id_number,json=idNumber,proto3" json:"id_number,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetMatchedCapturesRequest) Reset()         { *m = GetMatchedCapturesRequest{} }
func (m *GetMatchedCapturesRequest) String() string { return proto.CompactTextString(m) }
func (*GetMatchedCapturesRequest) ProtoMessage()    {}
func (*GetMatchedCapturesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb5c46a6c3e068f5, []int{5}
}

func (m *GetMatchedCapturesRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetMatchedCapturesRequest.Unmarshal(m, b)
}
func (m *GetMatchedCapturesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetMatchedCapturesRequest.Marshal(b, m, deterministic)
}
func (m *GetMatchedCapturesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetMatchedCapturesRequest.Merge(m, src)
}
func (m *GetMatchedCapturesRequest) XXX_Size() int {
	return xxx_messageInfo_GetMatchedCapturesRequest.Size(m)
}
func (m *GetMatchedCapturesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetMatchedCapturesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetMatchedCapturesRequest proto.InternalMessageInfo

func (m *GetMatchedCapturesRequest) GetProjectId() string {
	if m != nil {
		return m.ProjectId
	}
	return ""
}

func (m *GetMatchedCapturesRequest) GetIdNumber() string {
	if m != nil {
		return m.IdNumber
	}
	return ""
}

type GetMatchedCapturesResponse struct {
	// 匹配条数
	// @required
	Count int64 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	// 匹配列表
	// @required
	List                 []*MatchedCapture `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *GetMatchedCapturesResponse) Reset()         { *m = GetMatchedCapturesResponse{} }
func (m *GetMatchedCapturesResponse) String() string { return proto.CompactTextString(m) }
func (*GetMatchedCapturesResponse) ProtoMessage()    {}
func (*GetMatchedCapturesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb5c46a6c3e068f5, []int{6}
}

func (m *GetMatchedCapturesResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetMatchedCapturesResponse.Unmarshal(m, b)
}
func (m *GetMatchedCapturesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetMatchedCapturesResponse.Marshal(b, m, deterministic)
}
func (m *GetMatchedCapturesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetMatchedCapturesResponse.Merge(m, src)
}
func (m *GetMatchedCapturesResponse) XXX_Size() int {
	return xxx_messageInfo_GetMatchedCapturesResponse.Size(m)
}
func (m *GetMatchedCapturesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetMatchedCapturesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetMatchedCapturesResponse proto.InternalMessageInfo

func (m *GetMatchedCapturesResponse) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *GetMatchedCapturesResponse) GetList() []*MatchedCapture {
	if m != nil {
		return m.List
	}
	return nil
}

type MatchedCapture struct {
	// 记录唯一标识
	// @required
	Uuid string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	// 图片抓拍时间（时间戳）
	// @required
	CapturedAt int64 `protobuf:"varint,2,opt,name=captured_at,json=capturedAt,proto3" json:"captured_at,omitempty"`
	// 百分比相似度，范围：0~100
	// @required
	Similarity int32 `protobuf:"varint,3,opt,name=similarity,proto3" json:"similarity,omitempty"`
	// 友好化相似度（1低 2中 3高）
	// @required
	Level int32 `protobuf:"varint,4,opt,name=level,proto3" json:"level,omitempty"`
	// 人脸图片URL
	// @required
	FaceImageUrl string `protobuf:"bytes,5,opt,name=face_image_url,json=faceImageUrl,proto3" json:"face_image_url,omitempty"`
	// 背景图片URL
	// @required
	BackgroundImageUrl string `protobuf:"bytes,6,opt,name=background_image_url,json=backgroundImageUrl,proto3" json:"background_image_url,omitempty"`
	// 对比图片URL
	// @required
	CompareImageUrl string `protobuf:"bytes,7,opt,name=compare_image_url,json=compareImageUrl,proto3" json:"compare_image_url,omitempty"`
	// 短视频URL
	// @required
	ShortVideoUrl string `protobuf:"bytes,8,opt,name=short_video_url,json=shortVideoUrl,proto3" json:"short_video_url,omitempty"`
	// 唯一人脸标识
	// @required
	PersonId             string   `protobuf:"bytes,9,opt,name=person_id,json=personId,proto3" json:"person_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MatchedCapture) Reset()         { *m = MatchedCapture{} }
func (m *MatchedCapture) String() string { return proto.CompactTextString(m) }
func (*MatchedCapture) ProtoMessage()    {}
func (*MatchedCapture) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb5c46a6c3e068f5, []int{7}
}

func (m *MatchedCapture) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MatchedCapture.Unmarshal(m, b)
}
func (m *MatchedCapture) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MatchedCapture.Marshal(b, m, deterministic)
}
func (m *MatchedCapture) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MatchedCapture.Merge(m, src)
}
func (m *MatchedCapture) XXX_Size() int {
	return xxx_messageInfo_MatchedCapture.Size(m)
}
func (m *MatchedCapture) XXX_DiscardUnknown() {
	xxx_messageInfo_MatchedCapture.DiscardUnknown(m)
}

var xxx_messageInfo_MatchedCapture proto.InternalMessageInfo

func (m *MatchedCapture) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

func (m *MatchedCapture) GetCapturedAt() int64 {
	if m != nil {
		return m.CapturedAt
	}
	return 0
}

func (m *MatchedCapture) GetSimilarity() int32 {
	if m != nil {
		return m.Similarity
	}
	return 0
}

func (m *MatchedCapture) GetLevel() int32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *MatchedCapture) GetFaceImageUrl() string {
	if m != nil {
		return m.FaceImageUrl
	}
	return ""
}

func (m *MatchedCapture) GetBackgroundImageUrl() string {
	if m != nil {
		return m.BackgroundImageUrl
	}
	return ""
}

func (m *MatchedCapture) GetCompareImageUrl() string {
	if m != nil {
		return m.CompareImageUrl
	}
	return ""
}

func (m *MatchedCapture) GetShortVideoUrl() string {
	if m != nil {
		return m.ShortVideoUrl
	}
	return ""
}

func (m *MatchedCapture) GetPersonId() string {
	if m != nil {
		return m.PersonId
	}
	return ""
}

type UploadRecordRequest struct {
	// 项目ID
	// @required
	ProjectId string `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// 设备ID（后台手工上传时，设备ID为：user_code@@org_code）
	// @required
	DeviceId string `protobuf:"bytes,2,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	// 姓名
	// @required
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// 证件号
	// @required
	IdNumber string `protobuf:"bytes,4,opt,name=id_number,json=idNumber,proto3" json:"id_number,omitempty"`
	// 性别（-1未知 0男 1女）
	// @required
	Sex int32 `protobuf:"varint,5,opt,name=sex,proto3" json:"sex,omitempty"`
	// 身份证头像url，url和base64选填一个，2个都存在时，使用base64
	IdImageUrl string `protobuf:"bytes,6,opt,name=id_image_url,json=idImageUrl,proto3" json:"id_image_url,omitempty"`
	// 身份证头像Base64
	IdImageBase64 string `protobuf:"bytes,7,opt,name=id_image_base64,json=idImageBase64,proto3" json:"id_image_base64,omitempty"`
	// 现场核验头像url，url和base64选填一个，2个都存在时，使用base64
	FaceImageUrl string `protobuf:"bytes,8,opt,name=face_image_url,json=faceImageUrl,proto3" json:"face_image_url,omitempty"`
	// 现场核验头像Base64
	FaceImageBase64 string `protobuf:"bytes,9,opt,name=face_image_base64,json=faceImageBase64,proto3" json:"face_image_base64,omitempty"`
	// 认证时间，秒级时间戳，比如：1552720373
	VerifyTime int64 `protobuf:"varint,10,opt,name=verify_time,json=verifyTime,proto3" json:"verify_time,omitempty"`
	// 认证结果（0成功 1失败）
	VerifyResult int32 `protobuf:"varint,11,opt,name=verify_result,json=verifyResult,proto3" json:"verify_result,omitempty"`
	// 比对分值，人脸相似度[0,1]
	VerifyScore float32 `protobuf:"fixed32,12,opt,name=verify_score,json=verifyScore,proto3" json:"verify_score,omitempty"`
	// 认证来源（1人证一体机 2小程序核验 3手动上传 4外部导入）
	// @required
	SourceType           int32    `protobuf:"varint,13,opt,name=source_type,json=sourceType,proto3" json:"source_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UploadRecordRequest) Reset()         { *m = UploadRecordRequest{} }
func (m *UploadRecordRequest) String() string { return proto.CompactTextString(m) }
func (*UploadRecordRequest) ProtoMessage()    {}
func (*UploadRecordRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb5c46a6c3e068f5, []int{8}
}

func (m *UploadRecordRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UploadRecordRequest.Unmarshal(m, b)
}
func (m *UploadRecordRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UploadRecordRequest.Marshal(b, m, deterministic)
}
func (m *UploadRecordRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UploadRecordRequest.Merge(m, src)
}
func (m *UploadRecordRequest) XXX_Size() int {
	return xxx_messageInfo_UploadRecordRequest.Size(m)
}
func (m *UploadRecordRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UploadRecordRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UploadRecordRequest proto.InternalMessageInfo

func (m *UploadRecordRequest) GetProjectId() string {
	if m != nil {
		return m.ProjectId
	}
	return ""
}

func (m *UploadRecordRequest) GetDeviceId() string {
	if m != nil {
		return m.DeviceId
	}
	return ""
}

func (m *UploadRecordRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UploadRecordRequest) GetIdNumber() string {
	if m != nil {
		return m.IdNumber
	}
	return ""
}

func (m *UploadRecordRequest) GetSex() int32 {
	if m != nil {
		return m.Sex
	}
	return 0
}

func (m *UploadRecordRequest) GetIdImageUrl() string {
	if m != nil {
		return m.IdImageUrl
	}
	return ""
}

func (m *UploadRecordRequest) GetIdImageBase64() string {
	if m != nil {
		return m.IdImageBase64
	}
	return ""
}

func (m *UploadRecordRequest) GetFaceImageUrl() string {
	if m != nil {
		return m.FaceImageUrl
	}
	return ""
}

func (m *UploadRecordRequest) GetFaceImageBase64() string {
	if m != nil {
		return m.FaceImageBase64
	}
	return ""
}

func (m *UploadRecordRequest) GetVerifyTime() int64 {
	if m != nil {
		return m.VerifyTime
	}
	return 0
}

func (m *UploadRecordRequest) GetVerifyResult() int32 {
	if m != nil {
		return m.VerifyResult
	}
	return 0
}

func (m *UploadRecordRequest) GetVerifyScore() float32 {
	if m != nil {
		return m.VerifyScore
	}
	return 0
}

func (m *UploadRecordRequest) GetSourceType() int32 {
	if m != nil {
		return m.SourceType
	}
	return 0
}

type UploadRecordByMachineRequest struct {
	// 人证一体机设备编号
	// @required
	DeviceId string `protobuf:"bytes,1,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	// 姓名
	// @required
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// 性别（-1未知 0男 1女）
	// @required
	Sex int32 `protobuf:"varint,3,opt,name=sex,proto3" json:"sex,omitempty"`
	// 证件号
	// @required
	IdNumber string `protobuf:"bytes,4,opt,name=id_number,json=idNumber,proto3" json:"id_number,omitempty"`
	// 身份证头像Base64
	// @required
	IdImageBase64 string `protobuf:"bytes,5,opt,name=id_image_base64,json=idImageBase64,proto3" json:"id_image_base64,omitempty"`
	// 现场核验头像Base64
	// @required
	FaceImageBase64 string `protobuf:"bytes,6,opt,name=face_image_base64,json=faceImageBase64,proto3" json:"face_image_base64,omitempty"`
	// 认证时间，秒级时间戳，比如：1552720373
	// @required
	VerifyTime int64 `protobuf:"varint,7,opt,name=verify_time,json=verifyTime,proto3" json:"verify_time,omitempty"`
	// 认证结果（0成功 1失败）
	// @required
	VerifyResult int32 `protobuf:"varint,8,opt,name=verify_result,json=verifyResult,proto3" json:"verify_result,omitempty"`
	// 比对分值，人脸相似度[0,1]
	// @required
	VerifyScore          float32  `protobuf:"fixed32,9,opt,name=verify_score,json=verifyScore,proto3" json:"verify_score,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UploadRecordByMachineRequest) Reset()         { *m = UploadRecordByMachineRequest{} }
func (m *UploadRecordByMachineRequest) String() string { return proto.CompactTextString(m) }
func (*UploadRecordByMachineRequest) ProtoMessage()    {}
func (*UploadRecordByMachineRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb5c46a6c3e068f5, []int{9}
}

func (m *UploadRecordByMachineRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UploadRecordByMachineRequest.Unmarshal(m, b)
}
func (m *UploadRecordByMachineRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UploadRecordByMachineRequest.Marshal(b, m, deterministic)
}
func (m *UploadRecordByMachineRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UploadRecordByMachineRequest.Merge(m, src)
}
func (m *UploadRecordByMachineRequest) XXX_Size() int {
	return xxx_messageInfo_UploadRecordByMachineRequest.Size(m)
}
func (m *UploadRecordByMachineRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UploadRecordByMachineRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UploadRecordByMachineRequest proto.InternalMessageInfo

func (m *UploadRecordByMachineRequest) GetDeviceId() string {
	if m != nil {
		return m.DeviceId
	}
	return ""
}

func (m *UploadRecordByMachineRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UploadRecordByMachineRequest) GetSex() int32 {
	if m != nil {
		return m.Sex
	}
	return 0
}

func (m *UploadRecordByMachineRequest) GetIdNumber() string {
	if m != nil {
		return m.IdNumber
	}
	return ""
}

func (m *UploadRecordByMachineRequest) GetIdImageBase64() string {
	if m != nil {
		return m.IdImageBase64
	}
	return ""
}

func (m *UploadRecordByMachineRequest) GetFaceImageBase64() string {
	if m != nil {
		return m.FaceImageBase64
	}
	return ""
}

func (m *UploadRecordByMachineRequest) GetVerifyTime() int64 {
	if m != nil {
		return m.VerifyTime
	}
	return 0
}

func (m *UploadRecordByMachineRequest) GetVerifyResult() int32 {
	if m != nil {
		return m.VerifyResult
	}
	return 0
}

func (m *UploadRecordByMachineRequest) GetVerifyScore() float32 {
	if m != nil {
		return m.VerifyScore
	}
	return 0
}

type UploadRecordResponse struct {
	// 错误码
	// @required
	Code int64 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	// 错误信息
	// @required
	Message              string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UploadRecordResponse) Reset()         { *m = UploadRecordResponse{} }
func (m *UploadRecordResponse) String() string { return proto.CompactTextString(m) }
func (*UploadRecordResponse) ProtoMessage()    {}
func (*UploadRecordResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb5c46a6c3e068f5, []int{10}
}

func (m *UploadRecordResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UploadRecordResponse.Unmarshal(m, b)
}
func (m *UploadRecordResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UploadRecordResponse.Marshal(b, m, deterministic)
}
func (m *UploadRecordResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UploadRecordResponse.Merge(m, src)
}
func (m *UploadRecordResponse) XXX_Size() int {
	return xxx_messageInfo_UploadRecordResponse.Size(m)
}
func (m *UploadRecordResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UploadRecordResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UploadRecordResponse proto.InternalMessageInfo

func (m *UploadRecordResponse) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *UploadRecordResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterType((*GetRecordsRequest)(nil), "id_card.GetRecordsRequest")
	proto.RegisterType((*GetRecordsResponse)(nil), "id_card.GetRecordsResponse")
	proto.RegisterType((*Record)(nil), "id_card.Record")
	proto.RegisterType((*GetLogsRequest)(nil), "id_card.GetLogsRequest")
	proto.RegisterType((*GetLogsResponse)(nil), "id_card.GetLogsResponse")
	proto.RegisterType((*GetMatchedCapturesRequest)(nil), "id_card.GetMatchedCapturesRequest")
	proto.RegisterType((*GetMatchedCapturesResponse)(nil), "id_card.GetMatchedCapturesResponse")
	proto.RegisterType((*MatchedCapture)(nil), "id_card.MatchedCapture")
	proto.RegisterType((*UploadRecordRequest)(nil), "id_card.UploadRecordRequest")
	proto.RegisterType((*UploadRecordByMachineRequest)(nil), "id_card.UploadRecordByMachineRequest")
	proto.RegisterType((*UploadRecordResponse)(nil), "id_card.UploadRecordResponse")
}

func init() {
	proto.RegisterFile("proto/id_card_proto/id_card/id_card.proto", fileDescriptor_bb5c46a6c3e068f5)
}

var fileDescriptor_bb5c46a6c3e068f5 = []byte{
	// 1003 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x56, 0xdd, 0x72, 0xdb, 0x44,
	0x14, 0x1e, 0xf9, 0xdf, 0xc7, 0x71, 0xdc, 0x6c, 0x02, 0x55, 0xdd, 0x94, 0xb8, 0x0a, 0x94, 0x10,
	0x66, 0x62, 0x08, 0x0c, 0x17, 0xbd, 0xa3, 0xcd, 0x4c, 0x26, 0x33, 0x69, 0x87, 0x51, 0x5a, 0x98,
	0xe1, 0x02, 0xcd, 0x5a, 0xbb, 0x75, 0x16, 0x24, 0xad, 0x58, 0xad, 0x3c, 0xb8, 0xdc, 0x71, 0xc1,
	0x0b, 0xf0, 0x1a, 0x3c, 0x01, 0xdc, 0xf2, 0x06, 0xbc, 0x02, 0x37, 0x5c, 0xf1, 0x0a, 0xcc, 0xfe,
	0x58, 0x91, 0x6d, 0x25, 0xcd, 0x45, 0xaf, 0xa4, 0xfd, 0xce, 0xf1, 0xb7, 0x47, 0xdf, 0x77, 0xf6,
	0xac, 0xe1, 0xa3, 0x54, 0x70, 0xc9, 0xc7, 0x8c, 0x04, 0x21, 0x16, 0x24, 0x58, 0x5a, 0x2d, 0x9e,
	0x47, 0x1a, 0x45, 0x6d, 0xbb, 0x1c, 0xee, 0x4e, 0x39, 0x9f, 0x46, 0x74, 0x8c, 0x53, 0x36, 0xc6,
	0x49, 0xc2, 0x25, 0x96, 0x8c, 0x27, 0x99, 0x49, 0x1b, 0x6e, 0x87, 0x3c, 0x8e, 0x79, 0x32, 0x36,
	0x0f, 0x03, 0x7a, 0xff, 0x39, 0xb0, 0x75, 0x4a, 0xa5, 0x4f, 0x43, 0x2e, 0x48, 0xe6, 0xd3, 0x1f,
	0x73, 0x9a, 0x49, 0xf4, 0x00, 0x20, 0x15, 0xfc, 0x7b, 0x1a, 0xca, 0x80, 0x11, 0xd7, 0x19, 0x39,
	0x07, 0x5d, 0xbf, 0x6b, 0x91, 0x33, 0x82, 0xee, 0x43, 0x97, 0x91, 0x20, 0xc9, 0xe3, 0x09, 0x15,
	0x6e, 0x4d, 0x47, 0x3b, 0x8c, 0x3c, 0xd7, 0x6b, 0x84, 0xa0, 0x91, 0xe0, 0x98, 0xba, 0x75, 0x8d,
	0xeb, 0x77, 0xc5, 0x97, 0x49, 0x2c, 0x64, 0x40, 0xb0, 0xa4, 0x6e, 0xc3, 0xf0, 0x69, 0xe4, 0x04,
	0x4b, 0x8a, 0xee, 0x41, 0x87, 0x26, 0xc4, 0x04, 0x9b, 0x3a, 0xd8, 0xa6, 0x09, 0xd1, 0xa1, 0x3d,
	0xe8, 0x65, 0x3c, 0x17, 0x21, 0x0d, 0xe4, 0x3c, 0xa5, 0x6e, 0x6b, 0xe4, 0x1c, 0x34, 0x7d, 0x30,
	0xd0, 0x8b, 0x79, 0x4a, 0xd5, 0x76, 0x29, 0x9e, 0x52, 0xb7, 0x3d, 0x72, 0x0e, 0xea, 0xbe, 0x7e,
	0x57, 0xf5, 0xa9, 0x67, 0x90, 0xb1, 0xd7, 0xd4, 0xed, 0xe8, 0x40, 0x47, 0x01, 0x17, 0xec, 0x35,
	0xf5, 0xbe, 0x03, 0x54, 0xfe, 0xe0, 0x2c, 0xe5, 0x49, 0x46, 0xd1, 0x3e, 0x34, 0x55, 0x86, 0xd0,
	0x1f, 0xdb, 0x3b, 0xee, 0x1f, 0x59, 0x95, 0xbe, 0x52, 0xa0, 0x6f, 0x62, 0x68, 0x1f, 0x1a, 0x11,
	0xcb, 0xa4, 0x5b, 0x1b, 0xd5, 0x0f, 0x7a, 0xc7, 0x83, 0xa3, 0x85, 0x0d, 0x86, 0xcc, 0xd7, 0x41,
	0xef, 0x5f, 0x07, 0x5a, 0x06, 0x50, 0xb5, 0xe5, 0x79, 0x21, 0xa0, 0x7e, 0x2f, 0xe4, 0xa9, 0x95,
	0xe4, 0x59, 0xd2, 0xb3, 0xbe, 0xa2, 0xe7, 0x1d, 0xa8, 0x67, 0xf4, 0x27, 0x2d, 0x5a, 0xd3, 0x57,
	0xaf, 0x68, 0x04, 0x1b, 0x8c, 0x04, 0x2c, 0x56, 0x9f, 0x98, 0x8b, 0xc8, 0x4a, 0x06, 0x8c, 0x9c,
	0x29, 0xe8, 0xa5, 0x88, 0xd0, 0xfb, 0xb0, 0xf9, 0x0a, 0x87, 0xb4, 0x94, 0xd3, 0xd2, 0x39, 0x1b,
	0x0a, 0x2d, 0xb2, 0x56, 0xb4, 0x6d, 0xaf, 0x69, 0xbb, 0x07, 0xbd, 0x19, 0x15, 0xec, 0xd5, 0x3c,
	0x90, 0x2c, 0x36, 0x4a, 0x76, 0x7d, 0x30, 0xd0, 0x0b, 0x16, 0x53, 0xef, 0x1c, 0x36, 0x4f, 0xa9,
	0x3c, 0xe7, 0xd3, 0xb7, 0xd1, 0x39, 0xde, 0x39, 0x0c, 0x0a, 0x36, 0x6b, 0xcb, 0x0e, 0x34, 0x43,
	0x9e, 0x27, 0x52, 0x33, 0xd5, 0x7d, 0xb3, 0xb8, 0x9d, 0x0f, 0xdf, 0xc0, 0xbd, 0x53, 0x2a, 0x9f,
	0x61, 0x19, 0x5e, 0x52, 0xf2, 0x14, 0xa7, 0x32, 0x17, 0xf4, 0xad, 0x94, 0x19, 0xc0, 0xb0, 0x8a,
	0xf8, 0xc6, 0x8a, 0x3f, 0x5e, 0xaa, 0xf8, 0x6e, 0x51, 0xf1, 0x32, 0x8b, 0xad, 0xfc, 0xaf, 0x1a,
	0x6c, 0x2e, 0x07, 0x2a, 0x3b, 0x69, 0x0f, 0x7a, 0xa1, 0x09, 0x93, 0x00, 0x4b, 0x5d, 0x66, 0xdd,
	0x87, 0x05, 0xf4, 0xa5, 0x44, 0xef, 0x01, 0x64, 0x2c, 0x66, 0x11, 0x16, 0x4c, 0xce, 0x75, 0x5f,
	0x29, 0x7b, 0x0b, 0x44, 0x95, 0x1a, 0xd1, 0x19, 0x8d, 0x6c, 0x6f, 0x99, 0x45, 0x45, 0xef, 0x34,
	0x2b, 0x7a, 0xe7, 0x13, 0xd8, 0x99, 0xe0, 0xf0, 0x87, 0xa9, 0xe0, 0x79, 0x42, 0xd6, 0xfa, 0x0c,
	0x5d, 0xc5, 0x8a, 0x5f, 0x1c, 0xc2, 0x56, 0xc8, 0xe3, 0x14, 0x8b, 0x32, 0x75, 0x5b, 0xa7, 0x0f,
	0x6c, 0xa0, 0xc8, 0x7d, 0x04, 0x83, 0xec, 0x92, 0x0b, 0x19, 0xcc, 0x18, 0xa1, 0x5c, 0x67, 0x9a,
	0xe6, 0xeb, 0x6b, 0xf8, 0x6b, 0x85, 0xaa, 0x3c, 0x75, 0xd0, 0xa9, 0xc8, 0x78, 0xa2, 0x5c, 0xec,
	0x1a, 0x9f, 0x0c, 0x70, 0x46, 0xbc, 0x3f, 0xea, 0xb0, 0xfd, 0x32, 0x8d, 0x38, 0x26, 0xb6, 0x2f,
	0x6e, 0xed, 0x3d, 0xa1, 0x33, 0xa6, 0x14, 0x20, 0x0b, 0xef, 0x0d, 0x70, 0x46, 0x2a, 0x87, 0xdb,
	0x52, 0xb3, 0x34, 0xaa, 0x4f, 0x6f, 0xf3, 0xfa, 0xd3, 0xdb, 0x5a, 0x3b, 0xbd, 0x8f, 0x60, 0x50,
	0x64, 0x4c, 0x70, 0x46, 0xbf, 0xf8, 0xdc, 0xea, 0xd4, 0xb7, 0x49, 0x4f, 0x34, 0x58, 0xe1, 0x54,
	0xa7, 0xc2, 0xa9, 0x43, 0xd8, 0x2a, 0x65, 0x59, 0x3e, 0xa3, 0xd5, 0xa0, 0x48, 0xb4, 0x8c, 0x2b,
	0x07, 0x1e, 0x4c, 0x4b, 0x5d, 0x1d, 0x78, 0xb4, 0x0f, 0x7d, 0x9b, 0x20, 0x68, 0x96, 0x47, 0xd2,
	0xed, 0xe9, 0x0f, 0xdb, 0x30, 0xa0, 0xaf, 0x31, 0xf4, 0x10, 0xec, 0x3a, 0xc8, 0x42, 0x2e, 0xa8,
	0xbb, 0x31, 0x72, 0x0e, 0x6a, 0xbe, 0x65, 0xbe, 0x50, 0xd0, 0xea, 0xe8, 0xe9, 0xaf, 0x8e, 0x1e,
	0xef, 0xcf, 0x1a, 0xec, 0x96, 0xcd, 0x7b, 0x32, 0x7f, 0x86, 0xc3, 0x4b, 0x96, 0xd0, 0x85, 0x8b,
	0x4b, 0x36, 0x39, 0xd7, 0xd8, 0x54, 0x1e, 0xb2, 0xd6, 0x89, 0xfa, 0x95, 0x13, 0x37, 0x1a, 0x57,
	0x61, 0x42, 0xb3, 0xca, 0x84, 0x4a, 0x79, 0x5b, 0xb7, 0x92, 0xb7, 0xfd, 0x66, 0x79, 0x3b, 0xb7,
	0x90, 0xb7, 0xbb, 0x26, 0xaf, 0x77, 0x02, 0x3b, 0xcb, 0x9d, 0x6f, 0x87, 0x13, 0x82, 0x46, 0xc8,
	0x09, 0xb5, 0xb3, 0x49, 0xbf, 0x23, 0x17, 0xda, 0x31, 0xcd, 0x32, 0x75, 0x87, 0x1a, 0xb9, 0x16,
	0xcb, 0xe3, 0xdf, 0x1b, 0xd0, 0x3f, 0x3b, 0x79, 0x8a, 0x05, 0xb9, 0xa0, 0x42, 0x29, 0x8b, 0xbe,
	0x05, 0xb8, 0xba, 0x3b, 0xd1, 0xb0, 0x18, 0x63, 0x6b, 0xff, 0x20, 0x86, 0xf7, 0x2b, 0x63, 0xa6,
	0x0c, 0x6f, 0xfb, 0x97, 0xbf, 0xff, 0xf9, 0xad, 0xd6, 0x47, 0xbd, 0xf1, 0xec, 0xd3, 0xb1, 0xb0,
	0x6c, 0xcf, 0xa1, 0x6d, 0xa7, 0x3f, 0xba, 0x5b, 0xfe, 0x71, 0xe9, 0x76, 0x19, 0xba, 0xeb, 0x01,
	0x4b, 0x79, 0x47, 0x53, 0x02, 0xea, 0x28, 0xca, 0x48, 0x91, 0xfc, 0xac, 0xef, 0xf9, 0x95, 0x31,
	0x8d, 0xbc, 0x32, 0x43, 0xf5, 0xe5, 0x30, 0xdc, 0xbf, 0x31, 0xc7, 0x6e, 0xb8, 0xab, 0x37, 0x7c,
	0x17, 0xed, 0xa8, 0x0d, 0x63, 0x93, 0x14, 0x84, 0x8b, 0x6d, 0x18, 0x6c, 0x94, 0x0d, 0x40, 0xbb,
	0x05, 0x65, 0xc5, 0x44, 0x1a, 0x3e, 0xb8, 0x26, 0xba, 0xbc, 0x95, 0xb7, 0xa5, 0xb6, 0xca, 0x75,
	0x46, 0x60, 0x54, 0x7b, 0xec, 0x1c, 0xa2, 0x5f, 0x1d, 0x78, 0xa7, 0xf2, 0xa4, 0xa0, 0x0f, 0x2a,
	0x69, 0x57, 0x4f, 0xd2, 0x9b, 0x76, 0xff, 0x50, 0xef, 0xfe, 0xd0, 0xdb, 0x5d, 0xdb, 0x3d, 0x98,
	0xcc, 0x83, 0xd8, 0x70, 0x3d, 0x76, 0x0e, 0x27, 0x2d, 0xfd, 0x8f, 0xf2, 0xb3, 0xff, 0x03, 0x00,
	0x00, 0xff, 0xff, 0x56, 0x5c, 0x05, 0x49, 0xba, 0x0a, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// IDCardServiceClient is the client API for IDCardService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type IDCardServiceClient interface {
	// 获取记录列表
	// @author wangjm05
	GetRecords(ctx context.Context, in *GetRecordsRequest, opts ...grpc.CallOption) (*GetRecordsResponse, error)
	// 获取刷证log
	// @author wangjm05
	GetLogs(ctx context.Context, in *GetLogsRequest, opts ...grpc.CallOption) (*GetLogsResponse, error)
	// 获取人脸匹配结果
	// @author wangjm05
	GetMatchedCaptures(ctx context.Context, in *GetMatchedCapturesRequest, opts ...grpc.CallOption) (*GetMatchedCapturesResponse, error)
	// 添加认证记录
	// @author wangjm05
	UploadRecord(ctx context.Context, in *UploadRecordRequest, opts ...grpc.CallOption) (*UploadRecordResponse, error)
	// 添加认证记录（人证机）
	// @author wangjm05
	UploadRecordByMachine(ctx context.Context, in *UploadRecordByMachineRequest, opts ...grpc.CallOption) (*UploadRecordResponse, error)
}

type iDCardServiceClient struct {
	cc *grpc.ClientConn
}

func NewIDCardServiceClient(cc *grpc.ClientConn) IDCardServiceClient {
	return &iDCardServiceClient{cc}
}

func (c *iDCardServiceClient) GetRecords(ctx context.Context, in *GetRecordsRequest, opts ...grpc.CallOption) (*GetRecordsResponse, error) {
	out := new(GetRecordsResponse)
	err := c.cc.Invoke(ctx, "/id_card.IDCardService/GetRecords", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iDCardServiceClient) GetLogs(ctx context.Context, in *GetLogsRequest, opts ...grpc.CallOption) (*GetLogsResponse, error) {
	out := new(GetLogsResponse)
	err := c.cc.Invoke(ctx, "/id_card.IDCardService/GetLogs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iDCardServiceClient) GetMatchedCaptures(ctx context.Context, in *GetMatchedCapturesRequest, opts ...grpc.CallOption) (*GetMatchedCapturesResponse, error) {
	out := new(GetMatchedCapturesResponse)
	err := c.cc.Invoke(ctx, "/id_card.IDCardService/GetMatchedCaptures", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iDCardServiceClient) UploadRecord(ctx context.Context, in *UploadRecordRequest, opts ...grpc.CallOption) (*UploadRecordResponse, error) {
	out := new(UploadRecordResponse)
	err := c.cc.Invoke(ctx, "/id_card.IDCardService/UploadRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iDCardServiceClient) UploadRecordByMachine(ctx context.Context, in *UploadRecordByMachineRequest, opts ...grpc.CallOption) (*UploadRecordResponse, error) {
	out := new(UploadRecordResponse)
	err := c.cc.Invoke(ctx, "/id_card.IDCardService/UploadRecordByMachine", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IDCardServiceServer is the server API for IDCardService service.
type IDCardServiceServer interface {
	// 获取记录列表
	// @author wangjm05
	GetRecords(context.Context, *GetRecordsRequest) (*GetRecordsResponse, error)
	// 获取刷证log
	// @author wangjm05
	GetLogs(context.Context, *GetLogsRequest) (*GetLogsResponse, error)
	// 获取人脸匹配结果
	// @author wangjm05
	GetMatchedCaptures(context.Context, *GetMatchedCapturesRequest) (*GetMatchedCapturesResponse, error)
	// 添加认证记录
	// @author wangjm05
	UploadRecord(context.Context, *UploadRecordRequest) (*UploadRecordResponse, error)
	// 添加认证记录（人证机）
	// @author wangjm05
	UploadRecordByMachine(context.Context, *UploadRecordByMachineRequest) (*UploadRecordResponse, error)
}

// UnimplementedIDCardServiceServer can be embedded to have forward compatible implementations.
type UnimplementedIDCardServiceServer struct {
}

func (*UnimplementedIDCardServiceServer) GetRecords(ctx context.Context, req *GetRecordsRequest) (*GetRecordsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRecords not implemented")
}
func (*UnimplementedIDCardServiceServer) GetLogs(ctx context.Context, req *GetLogsRequest) (*GetLogsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLogs not implemented")
}
func (*UnimplementedIDCardServiceServer) GetMatchedCaptures(ctx context.Context, req *GetMatchedCapturesRequest) (*GetMatchedCapturesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMatchedCaptures not implemented")
}
func (*UnimplementedIDCardServiceServer) UploadRecord(ctx context.Context, req *UploadRecordRequest) (*UploadRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadRecord not implemented")
}
func (*UnimplementedIDCardServiceServer) UploadRecordByMachine(ctx context.Context, req *UploadRecordByMachineRequest) (*UploadRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadRecordByMachine not implemented")
}

func RegisterIDCardServiceServer(s *grpc.Server, srv IDCardServiceServer) {
	s.RegisterService(&_IDCardService_serviceDesc, srv)
}

func _IDCardService_GetRecords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRecordsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IDCardServiceServer).GetRecords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/id_card.IDCardService/GetRecords",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IDCardServiceServer).GetRecords(ctx, req.(*GetRecordsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IDCardService_GetLogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLogsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IDCardServiceServer).GetLogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/id_card.IDCardService/GetLogs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IDCardServiceServer).GetLogs(ctx, req.(*GetLogsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IDCardService_GetMatchedCaptures_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMatchedCapturesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IDCardServiceServer).GetMatchedCaptures(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/id_card.IDCardService/GetMatchedCaptures",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IDCardServiceServer).GetMatchedCaptures(ctx, req.(*GetMatchedCapturesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IDCardService_UploadRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IDCardServiceServer).UploadRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/id_card.IDCardService/UploadRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IDCardServiceServer).UploadRecord(ctx, req.(*UploadRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IDCardService_UploadRecordByMachine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadRecordByMachineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IDCardServiceServer).UploadRecordByMachine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/id_card.IDCardService/UploadRecordByMachine",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IDCardServiceServer).UploadRecordByMachine(ctx, req.(*UploadRecordByMachineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _IDCardService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "id_card.IDCardService",
	HandlerType: (*IDCardServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRecords",
			Handler:    _IDCardService_GetRecords_Handler,
		},
		{
			MethodName: "GetLogs",
			Handler:    _IDCardService_GetLogs_Handler,
		},
		{
			MethodName: "GetMatchedCaptures",
			Handler:    _IDCardService_GetMatchedCaptures_Handler,
		},
		{
			MethodName: "UploadRecord",
			Handler:    _IDCardService_UploadRecord_Handler,
		},
		{
			MethodName: "UploadRecordByMachine",
			Handler:    _IDCardService_UploadRecordByMachine_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/id_card_proto/id_card/id_card.proto",
}
